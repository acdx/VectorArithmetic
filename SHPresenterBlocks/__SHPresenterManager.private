
@interface SHPresenterBlocks (Queue);
@property(nonatomic,readonly) NSMutableOrderedSet * queue;
@end

@interface __SHPresenterManager : NSObject
@property(nonatomic,strong) NSMapTable     * mapBlocks;
+(instancetype)sharedManager;
-(void)SH_memoryDebugger;
@end

@implementation __SHPresenterManager

#pragma mark - Init & Dealloc
-(instancetype)init; {
  self = [super init];
  if (self) {
    self.mapBlocks            = [NSMapTable weakToStrongObjectsMapTable];
//    [self SH_memoryDebugger];
  }
  
  return self;
}


+(instancetype)sharedManager; {
  static id _sharedInstance;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedInstance = [[[self class] alloc] init];
  });
  
  return _sharedInstance;
  
}


#pragma mark - Debugger
-(void)SH_memoryDebugger; {
  __weak typeof(self) weakSelf = self;
  double delayInSeconds = 2.0;
  dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
  dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
    
//    NSLog(@"MAP %@",weakSelf.mapBlocks);
    [weakSelf.mapBlocks.objectEnumerator.allObjects enumerateObjectsUsingBlock:^(SHPresenterBlocks * obj, NSUInteger idx, BOOL *stop) {
      NSLog(@"%@", @(obj.queuedCount));
    }];
    
    [weakSelf SH_memoryDebugger];
  });
}


@end
